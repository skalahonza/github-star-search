@page "/"
@using Blazored.LocalStorage
@using GithubStarSearch.Searching
@using Octokit
@using Repository = GithubStarSearch.Searching.Repository

@inject ILogger<Home> Logger
@inject SearchService SearchService
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration


<PageTitle>Github Star Search</PageTitle>

<MudPaper Class="pa-4 mt-4">
    <MudStack>
        <MudTextField @bind-Value="GithubUsername" Label="Github Username"
                      Placeholder="Enter your Github username"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="SubmitUsername">(Re)-Index
            full text search
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" Disabled="true">Clear</MudButton>
    </MudStack>
</MudPaper>

<MudPaper Class="pa-4 mt-4">
    <MudTextField T="string" DebounceInterval="300" OnDebounceIntervalElapsed="Search" Label="Search"
                  Variant="Variant.Text"
                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                  HelperText="Searches in your starred repositories"/>
</MudPaper>

<MudPaper Class="pa-4 mt-4">
    @foreach (var repository in _searchResults)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@repository.Slug</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudText Typo="Typo.body1">@repository.Description</MudText>
                <MudText Typo="Typo.caption">Last Updated: @repository.UpdatedAt.ToLocalTime().ToString("g")</MudText>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" Href="@repository.Url" Class="ml-auto" Target="_blank">
                    View Repository
                </MudButton>
            </MudCardActions>
        </MudCard>

    }
</MudPaper>


@code {
    public string GithubUsername { get; set; } = "";
    private readonly List<Repository> _searchResults = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GithubUsername = await LocalStorage.GetItemAsync<string>("GithubUsername") ?? "";
            Logger.LogInformation("Github username loaded from local storage: {Username}", GithubUsername);
            StateHasChanged();
        }
    }

    private async Task SubmitUsername()
    {
        if (string.IsNullOrWhiteSpace(GithubUsername))
        {
            return;
        }

        await LocalStorage.SetItemAsync("GithubUsername", GithubUsername);

        // index user repos
        Logger.LogInformation("Indexing user repos for {Username}", GithubUsername);
        Logger.LogInformation("Initializing github client");
        var token = Configuration["Github:FineGrainedToken"];
        var github = new GitHubClient(new ProductHeaderValue("GithubStarSearch"));
        if (string.IsNullOrEmpty(token))
        {
            Logger.LogWarning("No fine grained token found, using anonymous client. This might lead to rate limiting");
        }
        else
        {
            Logger.LogInformation("Using fine grained token for authenticated requests");
            github.Credentials = new Credentials(token);
        }

        // Logger.LogInformation("Fetching user {Username} data", GithubUsername);
        // var user = await github.User.Get(GithubUsername);
        //
        // if (user is null)
        // {
        //     Logger.LogWarning("User {Username} not found", GithubUsername);
        //     return;
        // }

        Logger.LogInformation("Fetching user {Username} starred repositories", GithubUsername);
        var starred = await github.Activity.Starring.GetAllForUser(GithubUsername);

        Logger.LogInformation("Indexing {Count} repositories starred by {Username}", starred.Count, GithubUsername);
        await SearchService.IndexRepositories(starred.Select(x => new Repository
        {
            Id = Repository.ComputeRepositoryId(GithubUsername, x.Id),
            Slug = x.Name,
            Owner = x.Owner.Login,
            Url = x.HtmlUrl,
            UpdatedAt = x.UpdatedAt,
            StarredBy = GithubUsername,
            Description = x.Description,
        }));
        Logger.LogInformation("User {Username} onboarded successfully", GithubUsername);
    }

    private async Task Search(string searchQuery)
    {
        _searchResults.Clear();
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            return;
        }

        var results = await SearchService.SearchRepositories(GithubUsername, searchQuery);
        _searchResults.AddRange(results);
    }

}