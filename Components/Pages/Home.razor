@page "/"
@using Blazored.LocalStorage
@using GithubStarSearch.Searching
@using Octokit
@using Repository = GithubStarSearch.Searching.Repository

@inject ILogger<Home> Logger
@inject SearchService SearchService
@inject ILocalStorageService LocalStorage
@inject IConfiguration Configuration


<PageTitle>Github Star Search</PageTitle>

<MudGrid>
    <!-- GitHub Username Input Section -->
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h6" Class="mb-1">Enter your GitHub Username</MudText>
                <MudTextField @bind-Value="GithubUsername"
                              Placeholder="Enter your GitHub username..."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Person"
                              Class="mb-2" 
                              MaxLength="100"/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitUsername" Class="mt-1">
                    Re-Index Repositories
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudItem>

    <!-- Search Bar Section -->
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-4">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h6" Class="mb-1">Search Starred Repositories</MudText>
                <MudTextField T="string"
                              DebounceInterval="300"
                              OnDebounceIntervalElapsed="Search"
                              Placeholder="Search starred repositories..."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              HelperText="Search by typing repository names or keywords" 
                              MaxLength="1000"/>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@if (_searchResults.Any())
{
    <MudPaper Class="pa-4 mt-4">
        @foreach (var repository in _searchResults)
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@repository.Slug</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardContent>
                    <MudText Typo="Typo.body1">@repository.Description</MudText>
                    <MudText Typo="Typo.caption">Last
                        Updated: @repository.UpdatedAt.ToLocalTime().ToString("g")</MudText>
                </MudCardContent>

                <MudCardActions>
                    <MudButton Color="Color.Primary" Href="@repository.Url" Class="ml-auto" Target="_blank">
                        View Repository
                    </MudButton>
                </MudCardActions>
            </MudCard>
        }
    </MudPaper>
}
else
{
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h5">How to Use GitHub Star Search</MudText>
        <MudDivider Class="my-2"/>

        <MudText Typo="Typo.body1">
            1. Enter your GitHub username in the input field and click on <strong>(Re)-Index Full Text Search</strong>.
            You only need to perform this step once to set up the search functionality.
        </MudText>

        <MudText Typo="Typo.body1" Class="mt-2">
            2. Start typing in the search bar to find repositories you've starred on GitHub.
        </MudText>

        <MudText Typo="Typo.body1" Class="mt-2">
            3. The results will appear instantly as you type.
        </MudText>

        <MudDivider Class="my-2"/>
        <MudText Typo="Typo.caption" Class="text-secondary">
            Note: Ensure your GitHub profile is accessible to the app for the indexing process.
            We do not browser private repositories.
            Some users do not have public star data available.
        </MudText>
    </MudPaper>
}

@code {
    public string GithubUsername { get; set; } = "";
    private readonly List<Repository> _searchResults = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GithubUsername = await LocalStorage.GetItemAsync<string>("GithubUsername") ?? "";
            Logger.LogInformation("Github username loaded from local storage: {Username}", GithubUsername);
            StateHasChanged();
        }
    }

    private async Task SubmitUsername()
    {
        if (string.IsNullOrWhiteSpace(GithubUsername) || GithubUsername.Length > 100)
        {
            return;
        }

        await LocalStorage.SetItemAsync("GithubUsername", GithubUsername);

        // index user repos
        Logger.LogInformation("Indexing user repos for {Username}", GithubUsername);
        Logger.LogInformation("Initializing github client");
        var token = Configuration["Github:FineGrainedToken"];
        var github = new GitHubClient(new ProductHeaderValue("GithubStarSearch"));
        if (string.IsNullOrEmpty(token))
        {
            Logger.LogWarning("No fine grained token found, using anonymous client. This might lead to rate limiting");
        }
        else
        {
            Logger.LogInformation("Using fine grained token for authenticated requests");
            github.Credentials = new Credentials(token);
        }

        // Logger.LogInformation("Fetching user {Username} data", GithubUsername);
        // var user = await github.User.Get(GithubUsername);
        //
        // if (user is null)
        // {
        //     Logger.LogWarning("User {Username} not found", GithubUsername);
        //     return;
        // }

        Logger.LogInformation("Fetching user {Username} starred repositories", GithubUsername);
        var starred = await github.Activity.Starring.GetAllForUser(GithubUsername);

        Logger.LogInformation("Indexing {Count} repositories starred by {Username}", starred.Count, GithubUsername);
        await SearchService.IndexRepositories(starred.Select(x => new Repository
        {
            Id = Repository.ComputeRepositoryId(GithubUsername, x.Id),
            Slug = x.Name,
            Owner = x.Owner.Login,
            Url = x.HtmlUrl,
            UpdatedAt = x.UpdatedAt,
            StarredBy = GithubUsername,
            Description = x.Description,
        }));
        Logger.LogInformation("User {Username} onboarded successfully", GithubUsername);
    }

    private async Task Search(string searchQuery)
    {
        _searchResults.Clear();
        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length > 1000)
        {
            return;
        }

        var results = await SearchService.SearchRepositories(GithubUsername, searchQuery);
        _searchResults.AddRange(results);
    }

}